#!/usr/bin/env node --harmony_destructuring
'use strict'

/**
 * step5
 *
 * Uses the historical prices data file downloaded in step4 to show
 * the composition of a portfolio and breakdown by asset class on a given date.
 *
 * Example Use: ./step5 1-2-2014
 *
 */

const moment = require('moment')
const debug = require('debug')('step5')

const funds = require('./lib/funds')
const historicalPrices = require('./lib/historicalPrices')
const formatNumber = require('./lib/formatNumber')
const allocationSets = require('./lib/allocationSets')

console.log('========= Step 5 =========')

// parse date arg from CLI
var date = moment(new Date(process.argv.pop()))
if (!date.isValid()) {
  console.error('bad date, defaulting to 1-2-2014')
  date = moment(new Date('1-2-2014'))
}

// get the most recent allocation set from the given date
var allocationSet = allocationSets.getByDate(date)
debug('allocationSet', allocationSet)
if (!allocationSet) {
  console.error('Sorry, the earliest allocation date is', allocationSets.getEarliestDate())
  process.exit(1)
}

// iterate over each fund in the portfolio
var portfolioTotal = 0
var assetClassTotals = {}
for (let portfolioFund of allocationSet.portfolio) {
  let {symbol, shares} = portfolioFund

  // get price for the fund on the given date
  let price = historicalPrices.getPrice(symbol, date)
  if (price === null) {
    console.error('Unable to get price for %s on %s', symbol, date.toString())
    process.exit(1)
  }
  let {name, assetClass} = funds.getBySymbol(symbol)

  // calculate value of the fund based on shares in portfolio
  let value = shares * price

  // calculate total value of portfolio for each asset class
  if (!assetClassTotals[assetClass]) {
    assetClassTotals[assetClass] = 0
  }
  assetClassTotals[assetClass] += value

  // calculate total value of portfolio across all asset classes
  portfolioTotal += value
  console.log('%s: %d shares at %s ea. -- %s', name, shares, formatNumber(price), formatNumber(value))
}
console.log('Total: %s', formatNumber(portfolioTotal))

// iterate over each asset class total
console.log('\nAsset Class Breakdown')
for (let assetClass in assetClassTotals) {
  let assetClassTotal = assetClassTotals[assetClass]

  // calculate percentage the asset class represents in entire portfolio
  let pct = ((assetClassTotal / portfolioTotal) * 100).toFixed(2)
  console.log('  %s: %s%', assetClass, pct)
}
